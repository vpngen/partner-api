// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Admin admin
//
// swagger:model admin
type Admin struct {

	// keydesk IPv6 address
	// Required: true
	KeydeskIPV6Address *string `json:"KeydeskIPv6Address"`

	// person desc
	// Required: true
	PersonDesc *string `json:"PersonDesc"`

	// person desc link
	// Required: true
	PersonDescLink *string `json:"PersonDescLink"`

	// person name
	// Required: true
	PersonName *string `json:"PersonName"`

	// seed mnemo
	// Required: true
	SeedMnemo *string `json:"SeedMnemo"`

	// user name
	// Required: true
	UserName *string `json:"UserName"`

	// wire guard config
	// Required: true
	WireGuardConfig *string `json:"WireGuardConfig"`

	// wire guard config name
	// Required: true
	WireGuardConfigName *string `json:"WireGuardConfigName"`
}

// Validate validates this admin
func (m *Admin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeydeskIPV6Address(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonDesc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonDescLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeedMnemo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWireGuardConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWireGuardConfigName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Admin) validateKeydeskIPV6Address(formats strfmt.Registry) error {

	if err := validate.Required("KeydeskIPv6Address", "body", m.KeydeskIPV6Address); err != nil {
		return err
	}

	return nil
}

func (m *Admin) validatePersonDesc(formats strfmt.Registry) error {

	if err := validate.Required("PersonDesc", "body", m.PersonDesc); err != nil {
		return err
	}

	return nil
}

func (m *Admin) validatePersonDescLink(formats strfmt.Registry) error {

	if err := validate.Required("PersonDescLink", "body", m.PersonDescLink); err != nil {
		return err
	}

	return nil
}

func (m *Admin) validatePersonName(formats strfmt.Registry) error {

	if err := validate.Required("PersonName", "body", m.PersonName); err != nil {
		return err
	}

	return nil
}

func (m *Admin) validateSeedMnemo(formats strfmt.Registry) error {

	if err := validate.Required("SeedMnemo", "body", m.SeedMnemo); err != nil {
		return err
	}

	return nil
}

func (m *Admin) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("UserName", "body", m.UserName); err != nil {
		return err
	}

	return nil
}

func (m *Admin) validateWireGuardConfig(formats strfmt.Registry) error {

	if err := validate.Required("WireGuardConfig", "body", m.WireGuardConfig); err != nil {
		return err
	}

	return nil
}

func (m *Admin) validateWireGuardConfigName(formats strfmt.Registry) error {

	if err := validate.Required("WireGuardConfigName", "body", m.WireGuardConfigName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this admin based on context it is used
func (m *Admin) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Admin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Admin) UnmarshalBinary(b []byte) error {
	var res Admin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
