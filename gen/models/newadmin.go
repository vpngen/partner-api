// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Newadmin newadmin
//
// swagger:model newadmin
type Newadmin struct {

	// configs
	// Required: true
	Configs *Newuser `json:"Configs"`

	// keydesk IPv6
	// Required: true
	KeydeskIPV6 *string `json:"KeydeskIPv6"`

	// mnemo
	// Required: true
	Mnemo *string `json:"Mnemo"`

	// name
	// Required: true
	Name *string `json:"Name"`

	// person
	// Required: true
	Person *Person `json:"Person"`
}

// Validate validates this newadmin
func (m *Newadmin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeydeskIPV6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMnemo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerson(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Newadmin) validateConfigs(formats strfmt.Registry) error {

	if err := validate.Required("Configs", "body", m.Configs); err != nil {
		return err
	}

	if m.Configs != nil {
		if err := m.Configs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Configs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Configs")
			}
			return err
		}
	}

	return nil
}

func (m *Newadmin) validateKeydeskIPV6(formats strfmt.Registry) error {

	if err := validate.Required("KeydeskIPv6", "body", m.KeydeskIPV6); err != nil {
		return err
	}

	return nil
}

func (m *Newadmin) validateMnemo(formats strfmt.Registry) error {

	if err := validate.Required("Mnemo", "body", m.Mnemo); err != nil {
		return err
	}

	return nil
}

func (m *Newadmin) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Newadmin) validatePerson(formats strfmt.Registry) error {

	if err := validate.Required("Person", "body", m.Person); err != nil {
		return err
	}

	if m.Person != nil {
		if err := m.Person.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Person")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Person")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this newadmin based on the context it is used
func (m *Newadmin) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerson(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Newadmin) contextValidateConfigs(ctx context.Context, formats strfmt.Registry) error {

	if m.Configs != nil {

		if err := m.Configs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Configs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Configs")
			}
			return err
		}
	}

	return nil
}

func (m *Newadmin) contextValidatePerson(ctx context.Context, formats strfmt.Registry) error {

	if m.Person != nil {

		if err := m.Person.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Person")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Person")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Newadmin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Newadmin) UnmarshalBinary(b []byte) error {
	var res Newadmin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
