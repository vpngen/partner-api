// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vpngen/partner-api/gen/models"
)

// PostAdminCreatedCode is the HTTP code returned for type PostAdminCreated
const PostAdminCreatedCode int = 201

/*
PostAdminCreated VPN Admin config.

swagger:response postAdminCreated
*/
type PostAdminCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Admin `json:"body,omitempty"`
}

// NewPostAdminCreated creates PostAdminCreated with default headers values
func NewPostAdminCreated() *PostAdminCreated {

	return &PostAdminCreated{}
}

// WithPayload adds the payload to the post admin created response
func (o *PostAdminCreated) WithPayload(payload *models.Admin) *PostAdminCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post admin created response
func (o *PostAdminCreated) SetPayload(payload *models.Admin) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAdminCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostAdminForbiddenCode is the HTTP code returned for type PostAdminForbidden
const PostAdminForbiddenCode int = 403

/*
PostAdminForbidden You do not have necessary permissions for the resource

swagger:response postAdminForbidden
*/
type PostAdminForbidden struct {
}

// NewPostAdminForbidden creates PostAdminForbidden with default headers values
func NewPostAdminForbidden() *PostAdminForbidden {

	return &PostAdminForbidden{}
}

// WriteResponse to the client
func (o *PostAdminForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// PostAdminTooManyRequestsCode is the HTTP code returned for type PostAdminTooManyRequests
const PostAdminTooManyRequestsCode int = 429

/*
PostAdminTooManyRequests Rate limit reached for requests

swagger:response postAdminTooManyRequests
*/
type PostAdminTooManyRequests struct {
}

// NewPostAdminTooManyRequests creates PostAdminTooManyRequests with default headers values
func NewPostAdminTooManyRequests() *PostAdminTooManyRequests {

	return &PostAdminTooManyRequests{}
}

// WriteResponse to the client
func (o *PostAdminTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(429)
}

/*
PostAdminDefault error

swagger:response postAdminDefault
*/
type PostAdminDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostAdminDefault creates PostAdminDefault with default headers values
func NewPostAdminDefault(code int) *PostAdminDefault {
	if code <= 0 {
		code = 500
	}

	return &PostAdminDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post admin default response
func (o *PostAdminDefault) WithStatusCode(code int) *PostAdminDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post admin default response
func (o *PostAdminDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post admin default response
func (o *PostAdminDefault) WithPayload(payload *models.Error) *PostAdminDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post admin default response
func (o *PostAdminDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostAdminDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
