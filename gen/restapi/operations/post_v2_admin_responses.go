// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vpngen/partner-api/gen/models"
)

// PostV2AdminCreatedCode is the HTTP code returned for type PostV2AdminCreated
const PostV2AdminCreatedCode int = 201

/*
PostV2AdminCreated New user created.

swagger:response postV2AdminCreated
*/
type PostV2AdminCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Newadmin `json:"body,omitempty"`
}

// NewPostV2AdminCreated creates PostV2AdminCreated with default headers values
func NewPostV2AdminCreated() *PostV2AdminCreated {

	return &PostV2AdminCreated{}
}

// WithPayload adds the payload to the post v2 admin created response
func (o *PostV2AdminCreated) WithPayload(payload *models.Newadmin) *PostV2AdminCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post v2 admin created response
func (o *PostV2AdminCreated) SetPayload(payload *models.Newadmin) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostV2AdminCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostV2AdminForbiddenCode is the HTTP code returned for type PostV2AdminForbidden
const PostV2AdminForbiddenCode int = 403

/*
PostV2AdminForbidden You do not have necessary permissions for the resource

swagger:response postV2AdminForbidden
*/
type PostV2AdminForbidden struct {
}

// NewPostV2AdminForbidden creates PostV2AdminForbidden with default headers values
func NewPostV2AdminForbidden() *PostV2AdminForbidden {

	return &PostV2AdminForbidden{}
}

// WriteResponse to the client
func (o *PostV2AdminForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// PostV2AdminInternalServerErrorCode is the HTTP code returned for type PostV2AdminInternalServerError
const PostV2AdminInternalServerErrorCode int = 500

/*
PostV2AdminInternalServerError Internal server error

swagger:response postV2AdminInternalServerError
*/
type PostV2AdminInternalServerError struct {
}

// NewPostV2AdminInternalServerError creates PostV2AdminInternalServerError with default headers values
func NewPostV2AdminInternalServerError() *PostV2AdminInternalServerError {

	return &PostV2AdminInternalServerError{}
}

// WriteResponse to the client
func (o *PostV2AdminInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}

/*
PostV2AdminDefault error

swagger:response postV2AdminDefault
*/
type PostV2AdminDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostV2AdminDefault creates PostV2AdminDefault with default headers values
func NewPostV2AdminDefault(code int) *PostV2AdminDefault {
	if code <= 0 {
		code = 500
	}

	return &PostV2AdminDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post v2 admin default response
func (o *PostV2AdminDefault) WithStatusCode(code int) *PostV2AdminDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post v2 admin default response
func (o *PostV2AdminDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post v2 admin default response
func (o *PostV2AdminDefault) WithPayload(payload *models.Error) *PostV2AdminDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post v2 admin default response
func (o *PostV2AdminDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostV2AdminDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
